package com.weaver.agent.asm.adapter;

import com.weaver.agent.asm.util.ClientInit;
import com.weaver.agent.asm.util.ClientConstant;
import jdk.internal.org.objectweb.asm.commons.AdviceAdapter;
import jdk.internal.org.objectweb.asm.*;

public class FileClassAdapter extends ClassVisitor {


    public FileClassAdapter(int i) {
        super(i);
    }

    public FileClassAdapter(int i, ClassVisitor classVisitor) {
        super(i, classVisitor);
    }

    @Override
    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
        MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);
        if(name.equals("")){

        }
        if(name.equals("delete") || name.equals("deleteOnExit")) {
            AdviceAdapter newMv = new SayNameMethodAdapter(Opcodes.ASM4,mv, access, name, desc);
            return newMv;
        }
        return mv;
    }
    // 定义一个自己的方法访问类
    static class SayNameMethodAdapter extends AdviceAdapter {
        SayNameMethodAdapter(int api, MethodVisitor mv, int access, String name, String desc) {
            super(api,mv, access, name, desc);
            this.mv = mv;
            methodName = name;
        }

        private int startTimeId = -1;
        MethodVisitor mv = null;
        private String methodName = null;

        @Override
        protected void onMethodEnter() {
            super.onMethodEnter();
            startTimeId = newLocal(Type.LONG_TYPE);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J");
            mv.visitIntInsn(LSTORE, startTimeId);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
            Label l3 = new Label();
            Label l4 = new Label();
            Label l5 = new Label();
            mv.visitTryCatchBlock(l3, l4, l5, "java/io/IOException");
            Label l6 = new Label();
            Label l7 = new Label();
            Label l8 = new Label();
            mv.visitTryCatchBlock(l6, l7, l8, "java/io/IOException");
            Label l9 = new Label();
            Label l10 = new Label();
            Label l11 = new Label();
            mv.visitTryCatchBlock(l9, l10, l11, "java/lang/Exception");
            Label l12 = new Label();
            Label l13 = new Label();
            Label l14 = new Label();
            mv.visitTryCatchBlock(l12, l13, l14, "java/io/IOException");
            Label l15 = new Label();
            Label l16 = new Label();
            Label l17 = new Label();
            mv.visitTryCatchBlock(l15, l16, l17, "java/io/IOException");
            Label l18 = new Label();
            Label l19 = new Label();
            Label l20 = new Label();
            mv.visitTryCatchBlock(l18, l19, l20, "java/io/IOException");
            Label l21 = new Label();
            mv.visitTryCatchBlock(l9, l10, l21, null);
            Label l22 = new Label();
            mv.visitTryCatchBlock(l11, l22, l21, null);
            Label l23 = new Label();
            Label l24 = new Label();
            Label l25 = new Label();
            mv.visitTryCatchBlock(l23, l24, l25, "java/io/IOException");
            Label l26 = new Label();
            Label l27 = new Label();
            Label l28 = new Label();
            mv.visitTryCatchBlock(l26, l27, l28, "java/io/IOException");
            Label l29 = new Label();
            Label l30 = new Label();
            Label l31 = new Label();
            mv.visitTryCatchBlock(l29, l30, l31, "java/io/IOException");
            Label l32 = new Label();
            mv.visitTryCatchBlock(l21, l32, l21, null);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getStackTrace", "()[Ljava/lang/StackTraceElement;", false);
            mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([Ljava/lang/Object;)Ljava/lang/String;", false);
            mv.visitLdcInsn("com.caucho.server.resin.Resin.main");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
            Label l33 = new Label();
            mv.visitJumpInsn(IFNE, l33);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 3);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 5);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 6);
            mv.visitLdcInsn(ClientConstant.CONS_INFO.get(2));
            mv.visitVarInsn(ASTORE, 7);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitLdcInsn("{\"sfStack\":\"");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getStackTrace", "()[Ljava/lang/StackTraceElement;", false);
            mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([Ljava/lang/Object;)Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("\",\"ip\":\"");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("\",\"sfStackID\":\"");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getId", "()J", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(J)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("\",\"sfStackName\":\"");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getName", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("\",\"sfName\":\"");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("\"}");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 8);
            mv.visitLabel(l9);
            mv.visitTypeInsn(NEW, "java/net/URL");
            mv.visitInsn(DUP);
            mv.visitLdcInsn(ClientConstant.CONS_INFO.get(2));
            mv.visitMethodInsn(INVOKESPECIAL, "java/net/URL", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 9);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/URL", "openConnection", "()Ljava/net/URLConnection;", false);
            mv.visitTypeInsn(CHECKCAST, "java/net/HttpURLConnection");
            mv.visitVarInsn(ASTORE, 2);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitLdcInsn("POST");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setRequestMethod", "(Ljava/lang/String;)V", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitIntInsn(SIPUSH, 15000);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setConnectTimeout", "(I)V", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitLdcInsn(60000);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setReadTimeout", "(I)V", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setDoOutput", "(Z)V", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setDoInput", "(Z)V", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitLdcInsn("Content-Type");
            mv.visitLdcInsn("application/json");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getOutputStream", "()Ljava/io/OutputStream;", false);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getBytes", "()[B", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/OutputStream", "write", "([B)V", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getResponseCode", "()I", false);
            mv.visitIntInsn(SIPUSH, 200);
            mv.visitJumpInsn(IF_ICMPNE, l10);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getInputStream", "()Ljava/io/InputStream;", false);
            mv.visitVarInsn(ASTORE, 3);
            mv.visitTypeInsn(NEW, "java/io/BufferedReader");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitLdcInsn("UTF-8");
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedReader", "<init>", "(Ljava/io/Reader;)V", false);
            mv.visitVarInsn(ASTORE, 5);
            mv.visitTypeInsn(NEW, "java/lang/StringBuffer");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuffer", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 10);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 11);
            Label l34 = new Label();
            mv.visitLabel(l34);
            mv.visitFrame(Opcodes.F_FULL, 12, new Object[] {"Main", "[Ljava/lang/String;", "java/net/HttpURLConnection", "java/io/InputStream", "java/io/OutputStream", "java/io/BufferedReader", "java/lang/String", "java/lang/String", "java/lang/String", "java/net/URL", "java/lang/StringBuffer", "java/lang/String"}, 0, new Object[] {});
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "readLine", "()Ljava/lang/String;", false);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ASTORE, 11);
            Label l35 = new Label();
            mv.visitJumpInsn(IFNULL, l35);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;", false);
            mv.visitInsn(POP);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitLdcInsn("\r\n");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;", false);
            mv.visitInsn(POP);
            mv.visitJumpInsn(GOTO, l34);
            mv.visitLabel(l35);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "toString", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 6);
            mv.visitLabel(l10);
            mv.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ALOAD, 5);
            Label l36 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l36);
            mv.visitLabel(l0);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
            mv.visitLabel(l1);
            mv.visitJumpInsn(GOTO, l36);
            mv.visitLabel(l2);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 9);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l36);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ALOAD, 4);
            Label l37 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l37);
            mv.visitLabel(l3);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/OutputStream", "close", "()V", false);
            mv.visitLabel(l4);
            mv.visitJumpInsn(GOTO, l37);
            mv.visitLabel(l5);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 9);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l37);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ALOAD, 3);
            Label l38 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l38);
            mv.visitLabel(l6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            mv.visitLabel(l7);
            mv.visitJumpInsn(GOTO, l38);
            mv.visitLabel(l8);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 9);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l38);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "disconnect", "()V", false);
            mv.visitJumpInsn(GOTO, l33);
            mv.visitLabel(l11);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
            mv.visitVarInsn(ASTORE, 9);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
            mv.visitLabel(l22);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ALOAD, 5);
            Label l39 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l39);
            mv.visitLabel(l12);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
            mv.visitLabel(l13);
            mv.visitJumpInsn(GOTO, l39);
            mv.visitLabel(l14);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 9);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l39);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ALOAD, 4);
            Label l40 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l40);
            mv.visitLabel(l15);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/OutputStream", "close", "()V", false);
            mv.visitLabel(l16);
            mv.visitJumpInsn(GOTO, l40);
            mv.visitLabel(l17);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 9);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l40);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ALOAD, 3);
            Label l41 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l41);
            mv.visitLabel(l18);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            mv.visitLabel(l19);
            mv.visitJumpInsn(GOTO, l41);
            mv.visitLabel(l20);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 9);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l41);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "disconnect", "()V", false);
            mv.visitJumpInsn(GOTO, l33);
            mv.visitLabel(l21);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
            mv.visitVarInsn(ASTORE, 12);
            mv.visitLabel(l32);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ALOAD, 5);
            Label l42 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l42);
            mv.visitLabel(l23);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
            mv.visitLabel(l24);
            mv.visitJumpInsn(GOTO, l42);
            mv.visitLabel(l25);
            mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"Main", "[Ljava/lang/String;", "java/net/HttpURLConnection", "java/io/InputStream", "java/io/OutputStream", "java/io/BufferedReader", "java/lang/String", "java/lang/String", "java/lang/String", Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 13);
            mv.visitVarInsn(ALOAD, 13);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l42);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ALOAD, 4);
            Label l43 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l43);
            mv.visitLabel(l26);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/OutputStream", "close", "()V", false);
            mv.visitLabel(l27);
            mv.visitJumpInsn(GOTO, l43);
            mv.visitLabel(l28);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 13);
            mv.visitVarInsn(ALOAD, 13);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l43);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ALOAD, 3);
            Label l44 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l44);
            mv.visitLabel(l29);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            mv.visitLabel(l30);
            mv.visitJumpInsn(GOTO, l44);
            mv.visitLabel(l31);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
            mv.visitVarInsn(ASTORE, 13);
            mv.visitVarInsn(ALOAD, 13);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
            mv.visitLabel(l44);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "disconnect", "()V", false);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l33);
            mv.visitFrame(Opcodes.F_FULL, 2, new Object[] {"Main", "[Ljava/lang/String;"}, 0, new Object[] {});
            mv.visitInsn(RETURN);
            mv.visitMaxs(6, 14);
            mv.visitEnd();
        }

        @Override
        protected void onMethodExit(int opcode) {
            super.onMethodExit(opcode);
            int durationId = newLocal(Type.LONG_TYPE);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J");
            mv.visitVarInsn(LLOAD, startTimeId);
            mv.visitInsn(LSUB);
            mv.visitVarInsn(LSTORE, durationId);
            mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
            mv.visitLdcInsn("The cost time of " + methodName + " is ");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
            mv.visitVarInsn(LLOAD, durationId);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(J)Ljava/lang/StringBuilder;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
        }

    }
}
